#include "zerobit.h"
#include "defines.h"
#include "board.h"

void ZEROBIT_INIT(void)
{
//     GPIO_InitTypeDef GPIO_InitStructure;
//     GPIO_StructInit(&GPIO_InitStructure);
//     GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_3;
//     GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
//     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//     GPIO_Init(GPIOA, &GPIO_InitStructure);   
//        
    //-----
    // Не обязательно, это просто вывод опорный земли 
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;  
    GPIOA->CRL &= ~(GPIO_CRL_CNF3);
    GPIOA->CRL |=  (GPIO_CRL_MODE3); // двухтактный выход 50MHz
    //-----
    RCC->APB1ENR |= RCC_APB1ENR_DACEN | RCC_APB1ENR_TIM6EN;
    DAC->CR |= DAC_CR_EN1;
    // У нас тут частота тактовая 12MHz
    TIM6->PSC = 1500 - 1; // Настраиваем так, чтобы таймер тикал 8000 раз в секунду
    TIM6->ARR = 1; // 
    TIM6->DIER |= TIM_DIER_UIE; //разрешаем прерывание от таймера
    TIM6->CR1 |= TIM_CR1_CEN; // Начать отсчёт!
    NVIC_EnableIRQ(TIM6_DAC_IRQn); //Разрешение TIM6_DAC_IRQn прерывания
    __enable_irq();
}

void ZEROBIT_TIM_IRQ(void)
{
    TIM6->SR &= ~TIM_SR_UIF; //Сбрасываем флаг UIF
    uint16_t adc;
    static uint32_t t = 0;
    
    t++; // Инкремент и больше ничего
    // мелодии
    //adc = t*(t>>5|t>>8)>>(t>>16);//wan1
    
    //некоторые не проверял еще
    ///adc = t*((t>>9|t>>8)&63&t>>4);
    ///adc = t*((t>>12|t>>8)&63&t>>4);
    ///adc = t*((t>>9|t>>13)&25&t>>6);
    ///adc = t*(t>>11&t>>8&123&t>>3);//
    ///adc = t*(t>>8*(t>>15|t>>8)&(20|(t>>19)*5>>t|t>>3));//15 sec minitunes by visy PONG
    ///adc = (-t*4095)*(255&t*(t&t>>13)>>12)+(127&t*(234&t>>8&t>>3)>>(3&t>>14));//  fg
    //adc = t*(t>>(t>>9&t>>8)&63&t>>4);//
    //adc = ((t*(t>>8|t>>9)&46&t>>8)^(t&t>>13|t>>6));//Lost
    //adc = t*5&(t>>7)|t*3&(t*4>>10);//)>>(t>>16);///Crash

    //------------------------------
    /**
    adc = ((t*4>>43|t*4>>4)*43);
    adc = ((((((t/16000)%2>1?t*3|16*t:t*2|16*t)|123)+((t/32000)%2>1?(t%1000<500?t*18.3:0):(t%1000<500?t*18.9:0)))|(t/1000<<8))|256)%205+(t%1000<50?t<<t/5:0);
    adc = ((t*40>>430|t*40>>4)*430);
    adc = x=(t/4%12888>>12)%8,beat=(t>>3|t>>5),z=t%(55+x)+t%(33-x)+t%(42-x*2),z&beat;
    adc = t>>(((t%2?t%((t>>13)%8>=2?((t>>13)%8>=4?41:51):61):t%34)))|(~t>>4); //типа транса
    adc = t/479 & (t%(t%5641>>65)) & t;
    adc = t/39 & (t%(t%44444>>34)) & t;
    adc = (t*t/10000)%100|((t%29+t%46+t%((t>>14)%2?34:43))+(t%17))<<1; // возростающий шум
    adc = 11*t+t>>(t>>(t>>(9*t>>(3*t>>(7*t>>(t>>7))))))|(t>>2); // стучки
    adc = ((-t/4)>>2)^((t/2>>9)&~(~t>>9)-~t>>9)*(t/(t%0xface>0x3d00?(t%0xface>0x7d00?6:5):4))*(1-(t)^!0);
    

    adc = (t%(200-t%8+t>>10)); // гамма
    adc = a=(t/34)%1000,x=t*(a>250?(a>500?(a>750?19:17):15):13)/10,((x^5)<<((x)&1233))|(~t>>3);
    adc = ((t>>9)&~(~t>>9)-~t>>9)*(t/(t%64000>16000?(t%64000>32000?6:5):4)*t*(~t>>9999))|(t>>3)+0*(~t>>9);
    adc = t*(t>>14&t/256+t>>9); //8-ми битный лес
    adc = (t/(42334 - (t%4335)>>3)) * (t>>104) & 0xdead - (t%1234321/11); // наступающий ужас
    adc = (t+(t^(t>>7))^0.5)*5; //
    adc = t%(((t&~12)|t>>10)&42)|(8*t>>7); // преследование
    adc = (t%((t>>3)+((t>>2)%2?-5:-10)/t>>8&(130+((t%65536)>>10))))<<2; // жучек раздавлен
    
    adc = (t>0&t<65535?t%32>(t/10000)?t>>4:t>>6:0+t>65535&t<65535*2?t%32>(t%43) \
    ?t>>4:t>>6:0+t>65535*2&t<65535*3?t%36>(t%43)?t>>4:t>>6:0+t>65535*3&t<65535*4? \
    t%64>(t%43)?t>>4:t>>6:0+t>65535*4&t<65535*5?t%43>5?t<<3:t>>6:0+t>65535*5&t<65535 \
    *6?t%27>5?t<<3:t>>6:0+t>65535*6&t<65535*8?t%63>5?t<<3:t>>6:0)&(t>>4); // офигеть сложная формула ))
    
    adc = ((t*2>>43|t*3*5>>4)*19)&(t*7>>172)/2; // терминатор сломалсо
    adc = t*(((t>>9)&10)|((t>>11)&24)^((t>>10)&15&(t>>15))); //
    
    adc = t*((t>>12|t>>8)&63&t>>4); //
    adc = (t/4)%(t*2.5&t*3.7&t*5|t*2>>6); // оркестр смерти
    
    adc = ((t*40>>430|t*40>>4)*430); // ЗЕМФИРА
    adc = t*((t>>9|t>3)&25&t>>10); // МИТАЛКОР
    adc = ((t*4>>43|t*4>>4)*43); // Грустно
    
    adc = t<40000?((t<20000?((t%(t>>9)*10)|(t/2)&t):(t*(t>>9)*10)&t/2)|(t%(t>>9)*3)&t/16):(t*(t>>9)^t); // ПСИХОДЕЛ
    */
    
    adc = t*(t>>14&t/256+t>>9); //t%(((t&~12)|t>>10)&42)|(8*t>>7);
    
    DAC->DHR12R1 = adc << 4;   // загрузка в ЦАП1
}

